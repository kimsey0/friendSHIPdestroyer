//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Settings/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""Thruster1"",
            ""id"": ""33b70cc0-d787-46a8-805d-d4e31d7d4d1c"",
            ""actions"": [
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""543576db-8cb4-4e79-8272-7255e54c2943"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Thrust"",
                    ""type"": ""Button"",
                    ""id"": ""b409f4ad-c7b1-4645-9296-0a2d67662f17"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""c6229088-7919-4470-bb3d-8640f8651a72"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""fcbdb891-ba96-4f6f-a909-d9a6a8e6e7ce"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""049e8620-4227-47ff-a7e2-35b16567ca35"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0989df19-d057-4d64-b010-01c9f54123f1"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d077355-0072-4c54-a611-374ea34208d1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""860d8b1b-830d-44ad-a7d6-fdec826ff9e4"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Thruster2"",
            ""id"": ""c62705cb-91ca-4972-94e3-79a3a4270b75"",
            ""actions"": [
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""4a6b5ec6-e191-4931-ab7e-936f2ea66e49"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Thrust"",
                    ""type"": ""Button"",
                    ""id"": ""3c68b7ca-b091-4101-a0d7-cc6a3b73cad9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""85cba620-2a5a-4c67-9d92-871c21f169b7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""fb30d492-2305-4e30-afe2-a780d9b1bea5"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""158e3838-2398-4582-b347-c3e594645bf6"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""07f255ea-2186-4371-b4aa-5bd59098922a"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""215a02e5-1456-4b33-bdb7-0147a45dbd86"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""083a4c23-9bea-4b7a-aa02-9039849bd9e0"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Thruster1
        m_Thruster1 = asset.FindActionMap("Thruster1", throwIfNotFound: true);
        m_Thruster1_Rotation = m_Thruster1.FindAction("Rotation", throwIfNotFound: true);
        m_Thruster1_Thrust = m_Thruster1.FindAction("Thrust", throwIfNotFound: true);
        // Thruster2
        m_Thruster2 = asset.FindActionMap("Thruster2", throwIfNotFound: true);
        m_Thruster2_Rotation = m_Thruster2.FindAction("Rotation", throwIfNotFound: true);
        m_Thruster2_Thrust = m_Thruster2.FindAction("Thrust", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Thruster1
    private readonly InputActionMap m_Thruster1;
    private IThruster1Actions m_Thruster1ActionsCallbackInterface;
    private readonly InputAction m_Thruster1_Rotation;
    private readonly InputAction m_Thruster1_Thrust;
    public struct Thruster1Actions
    {
        private @Input m_Wrapper;
        public Thruster1Actions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotation => m_Wrapper.m_Thruster1_Rotation;
        public InputAction @Thrust => m_Wrapper.m_Thruster1_Thrust;
        public InputActionMap Get() { return m_Wrapper.m_Thruster1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Thruster1Actions set) { return set.Get(); }
        public void SetCallbacks(IThruster1Actions instance)
        {
            if (m_Wrapper.m_Thruster1ActionsCallbackInterface != null)
            {
                @Rotation.started -= m_Wrapper.m_Thruster1ActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_Thruster1ActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_Thruster1ActionsCallbackInterface.OnRotation;
                @Thrust.started -= m_Wrapper.m_Thruster1ActionsCallbackInterface.OnThrust;
                @Thrust.performed -= m_Wrapper.m_Thruster1ActionsCallbackInterface.OnThrust;
                @Thrust.canceled -= m_Wrapper.m_Thruster1ActionsCallbackInterface.OnThrust;
            }
            m_Wrapper.m_Thruster1ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @Thrust.started += instance.OnThrust;
                @Thrust.performed += instance.OnThrust;
                @Thrust.canceled += instance.OnThrust;
            }
        }
    }
    public Thruster1Actions @Thruster1 => new Thruster1Actions(this);

    // Thruster2
    private readonly InputActionMap m_Thruster2;
    private IThruster2Actions m_Thruster2ActionsCallbackInterface;
    private readonly InputAction m_Thruster2_Rotation;
    private readonly InputAction m_Thruster2_Thrust;
    public struct Thruster2Actions
    {
        private @Input m_Wrapper;
        public Thruster2Actions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotation => m_Wrapper.m_Thruster2_Rotation;
        public InputAction @Thrust => m_Wrapper.m_Thruster2_Thrust;
        public InputActionMap Get() { return m_Wrapper.m_Thruster2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Thruster2Actions set) { return set.Get(); }
        public void SetCallbacks(IThruster2Actions instance)
        {
            if (m_Wrapper.m_Thruster2ActionsCallbackInterface != null)
            {
                @Rotation.started -= m_Wrapper.m_Thruster2ActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_Thruster2ActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_Thruster2ActionsCallbackInterface.OnRotation;
                @Thrust.started -= m_Wrapper.m_Thruster2ActionsCallbackInterface.OnThrust;
                @Thrust.performed -= m_Wrapper.m_Thruster2ActionsCallbackInterface.OnThrust;
                @Thrust.canceled -= m_Wrapper.m_Thruster2ActionsCallbackInterface.OnThrust;
            }
            m_Wrapper.m_Thruster2ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @Thrust.started += instance.OnThrust;
                @Thrust.performed += instance.OnThrust;
                @Thrust.canceled += instance.OnThrust;
            }
        }
    }
    public Thruster2Actions @Thruster2 => new Thruster2Actions(this);
    public interface IThruster1Actions
    {
        void OnRotation(InputAction.CallbackContext context);
        void OnThrust(InputAction.CallbackContext context);
    }
    public interface IThruster2Actions
    {
        void OnRotation(InputAction.CallbackContext context);
        void OnThrust(InputAction.CallbackContext context);
    }
}
